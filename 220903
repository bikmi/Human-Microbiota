trim.seqs(fasta=sample.fasta,qfile=sample.qual,oligos=oligo-S6.txt,checkorient=T,bdiffs=2,pdiffs=4,maxambig=0,maxhomop=8,qwindowsize=50,qwindowaverage=35,flip=T,allfiles=T,minlength=1200,maxlength=2000)

summary.seqs(fasta=sample.trim.fasta, count=sample.trim.count_table)

unique.seqs(fasta=sample.trim.fasta, count=sample.trim.count_table)

summary.seqs(fasta=sample.trim.unique.fasta, count=sample.trim.unique.count_table)

align.seqs(fasta=sample.trim.unique.fasta,reference=/home/disk2/DATABAE/Mothur/silva.nr_v138.align,flip=T)

summary.seqs(fasta=sample.trim.unique.align,count=sample.trim.unique.count_table)

screen.seqs(fasta=sample.trim.unique.align,count=sample.trim.unique.count_table,start=1044,end=43116)

summary.seqs(fasta=sample.trim.unique.good.align, count=sample.trim.unique.good.count_table)

filter.seqs(fasta=sample.trim.unique.good.align, vertical=T, trump=.)

unique.seqs(fasta=sample.trim.unique.good.filter.fasta, count=sample.trim.unique.good.count_table)

pre.cluster(fasta=sample.trim.unique.good.filter.unique.fasta,count=sample.trim.unique.good.filter.count_table,diffs=15)

chimera.vsearch(fasta=sample.trim.unique.good.filter.unique.precluster.fasta, count=sample.trim.unique.good.filter.unique.precluster.count_table, dereplicate=t)

summary.seqs(fasta=current, count=current)

classify.seqs(fasta=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.fasta, count=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.count_table, reference=/home/disk2/DATABAE/Mothur/silva.seed_v138_1.align, taxonomy=/home/disk2/DATABAE/Mothur/silva.seed_v138_1.tax)

remove.lineage(fasta=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.fasta, count=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.count_table, taxonomy=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.seed_v138_1.wang.taxonomy, taxon=Cyanobacteria)

summary.tax(taxonomy=current, count=current)

make.shared(count=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table)

classify.otu(list=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.list, count=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, taxonomy=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.seed_v138_1.wang.pick.taxonomy, label=ASV)

sed -n '1p' sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.list |cut -f 3- | sed 's/\t/\n/g' > sample.otu.accnos

sed -n '2p' sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.list |cut -f 3- | sed 's/\t/\n/g' > sample.asv.accnos

paste sample.asv.accnos sample.otu.accnos > sample.asv.map

count.seqs(count=sample.asv.map,count=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table,compress=f)

awk 'NR==FNR{huty[$1]=$2;next}NR>FNR{if($1 in huty){print huty[$1] "\t" $0} else {print "OTU ID" "\t" $0}}' sample.asv.map sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.full.count_table | cut -f 1,4- > OTU_table.tsv

sed -i '1c OTU ID\tRNAV18S6S\tRNAV18S6F\tRNAV18S6A\tRNAV18S6T\tRNAV18S6O\tRNAV18S6N\tRNAV18S6I' OTU_table.tsv

biom convert -i OTU_table.tsv -o mothur_shared.biom --table-type="OTU table" --to-hdf5

qiime tools import --type 'FeatureTable[Frequency]' --input-path mothur_shared.biom --output-path frequency_table.qza --input-format BIOMV210Format

cut -f 1,3 sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.asv.ASV.cons.taxonomy | paste > tax.tsv

sed 's/OTU\tTaxonomy/Feature ID\tTaxon/' tax.tsv > taxonomy.tsv

qiime tools import --type 'FeatureData[Taxonomy]' --input-path taxonomy.tsv --output-path taxonomy_table.qza --input-format TSVTaxonomyFormat

qiime taxa barplot --i-table frequency_table.qza --i-taxonomy taxonomy_table.qza --m-metadata-file metadata.txt --o-visualization taxa-bar-plots.qzv

rename.seqs(fasta=sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.fasta,map=sample.asv.map)

seqkit seq -g sample.trim.unique.good.filter.unique.precluster.denovo.vsearch.pick.renamed.fasta -o sample.rep.fasta

qiime tools import --input-path sample.rep.fasta --output-path sequences.qza --type 'FeatureData[Sequence]'

qiime phylogeny align-to-tree-mafft-fasttree --i-sequences sequences.qza --o-alignment rep-seqs.qza --o-masked-alignment masked-aligned-rep-seqs.qza --o-tree unrooted-tree.qza --o-rooted-tree rooted-tree.qza --p-n-threads 30

qiime diversity core-metrics-phylogenetic --i-phylogeny rooted-tree.qza --i-table frequency_table.qza --p-sampling-depth 3000 --m-metadata-file metadata.tsv --output-dir core-metrics-results --p-n-jobs-or-threads 30




