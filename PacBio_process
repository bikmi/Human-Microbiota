##########
DNA part##
##########
27F (AGRGTTYGATYMTGGCTCAG) and 1492R (TACCTTGTTAYGACTT) amplification PacBio sequencing results analysis pipline
Software dependent mothur and QIIME2
/home/server/mothur/mothur
Linux version

Using ReadLine,Boost,HDF5,GSL
mothur v.1.45.3
Last updated: 5/8/21
by
Patrick D. Schloss

Department of Microbiology & Immunology

Before analysis, i formate the silva tax file to mothur suited tax file.
Details: revome the first line, add ';' to the end of each line and remove all spaces (\s).

Upstream analysis
-------------------------------------------------------------------------------------------------------------------
1. transfer *bam to fastq
bedtools bamtofastq -i m64144_210705_100006.ccs.bam -fq sample.fq
2. demultiplex barcoded samples and quality control 
trim.seqs(fasta=sample.fasta,qfile=sample.qual,oligos=oligo-all.txt,checkorient=T,bdiffs=2,pdiffs=4,maxambig=0,maxhomop=6,qwindowsize=50,qwindowaverage=35,flip=T,allfiles=T,minlength=1200,maxlength=2000,processors=30)
3. combined demultplexed *fasta, *qual, and *groups; prepare namses file
cut -f 1 sample.DNA.groups > sample.DNA.accnos
paste sample.DNA.accnos sample.DNA.accnos > sample.DNA.names
4. calculate seqs number
summary.seqs(fasta=test2.fasta,name=test2.names)
5. unique same sequences and record sequences number
unique.seqs(fasta=test2.fasta, name=test2.names)
6. calculate seqs number
summary.seqs(fasta=test2.unique.fasta, name=test2.unique.names)
7. align sequences to silva 138 reference
align.seqs(fasta=test2.unique.fasta,reference=/home/disk2/DATABAE/Mothur/silva.nr_v138.align,flip=T,processors=30)
8. calculate seqs number, start site and end site
summary.seqs(fasta=test2.unique.align,name=test2.unique.names)
9. screen sequenences boundary out of the real site  
screen.seqs(fasta=test2.unique.align,start=1044,end=42554,minscore=90,minsim=90,alignreport=test2.unique.align.report,processors=30,group=test2.groups,name=test2.unique.names)
10. calculate seqs number
summary.seqs(fasta=test2.unique.good.align, name=test2.unique.good.names)
11. remove common gaps
filter.seqs(fasta=test2.unique.good.align)
12. unique same sequences and record sequences number
unique.seqs(fasta=test2.unique.good.filter.fasta, name=test2.unique.good.names)
13. decrease error ratio and output ASV files
pre.cluster(fasta=test2.unique.good.filter.unique.fasta, name=test2.unique.good.filter.names, group=test2.good.groups, diffs=15)
14. calculate seqs number and asv distribution
summary.seqs(fasta=test2.unique.good.filter.unique.precluster.fasta, count=test2.unique.good.filter.unique.precluster.count_table)
16. recongnize denovo chimeras
chimera.uchime(fasta=test2.unique.good.filter.unique.precluster.fasta, count=test2.unique.good.filter.unique.precluster.count_table)
17. remove chimeras from upstair
remove.seqs(accnos=test2.unique.good.filter.unique.precluster.denovo.uchime.accnos, fasta=test2.unique.good.filter.unique.precluster.fasta, count=test2.unique.good.filter.unique.precluster.count_table, dups=T)
18. pre.cluster representation sequences classification
classify.seqs(fasta=test2.unique.good.filter.unique.precluster.pick.fasta, count=test2.unique.good.filter.unique.precluster.pick.count_table, reference=/home/disk2/DATABAE/QIIME2/silva-138-99-seqs.fasta, taxonomy=/home/disk2/DATABAE/QIIME2/silva-138-99.tax, cutoff=80,processors=30)
--------------------------------------------------
as mothur describe in Miseq/454 SOP, otu table can be produced when i follow next steps. However, i found there is a bug in make.shared
--------------------------------------------------
19. make classify OTU table
make.shared(count=test2.unique.good.filter.unique.precluster.pick.count_table)####this command produce right list file,but wrong *shared file.
20. output ASV classification table 
classify.otu(list=test2.unique.good.filter.unique.precluster.pick.ASV.list,count=test2.unique.good.filter.unique.precluster.pick.count_table,taxonomy=test2.unique.good.filter.unique.precluster.pick.silva_138_99.wang.taxonomy,label=ASV)
21. make qiime suited biom file
cut -f 2,4- test2.unique.good.filter.unique.precluster.pick.ASV.shared | awk '
{
    for (i=1; i<=NF; i++)  {
        a[NR,i] = $i
    }
}
NF>p { p = NF }
END {
    for(j=1; j<=p; j++) {
        str=a[1,j]
        for(i=2; i<=NR; i++){
            str=str" "a[i,j];
        }
        print str
    }
}' > table.txt

sed -i 's/\s/\t/g' table.txt
biom convert -i table.txt -o mothur_shared.biom --table-type="OTU table" --to-hdf5
qiime tools import --type 'FeatureTable[Frequency]' --input-path mothur_shared.biom --output-path frequency_table.qza --input-format BIOMV210Format
cut -f 1,3 sample.DNA.unique.good.filter.unique.precluster.pick.ASV.ASV.cons.taxonomy | paste > tax.tsv
sed 's/OTU\tTaxonomy/Feature ID\tTaxon/' tax.tsv > taxonomy.tsv
qiime tools import --type 'FeatureData[Taxonomy]' --input-path taxonomy.txt --output-path taxonomy_table.qza --input-format TSVTaxonomyFormat
make represent sequences
sed -n '1p' sample.DNA.unique.good.filter.unique.precluster.pick.ASV.list|cut -f 3- | sed 's/\t/\n/g' > sample.otu.accnos
sed -n '2p' sample.DNA.unique.good.filter.unique.precluster.pick.ASV.list|cut -f 3- | sed 's/\t/\n/g' > sample.asv.accnos
paste sample.asv.accnos sample.otu.accnos > sample.asv.map
mothur > rename.seqs(fasta=sample.DNA.unique.good.filter.unique.precluster.pick.fasta,map=sample.asv.map)
seqkit seq -g sample.DNA.unique.good.filter.unique.precluster.pick.renamed.fasta -o sample.rep.fasta
qiime tools import --input-path sample.rep.fasta --output-path sequences.qza --type 'FeatureData[Sequence]'
qiime taxa barplot --i-table frequency_table.qza --i-taxonomy taxonomy_table.qza --m-metadata-file metadata.txt --o-visualization taxa-bar-plots.qzv 
--------------------------------------------------
Alternatively, i use follow step achieve final OTU_table
--------------------------------------------------
awk 'NR==FNR{huty[$1]=$2;next}NR>FNR{if($1 in huty){print huty[$1] "\t" $0} else {print "OTU ID" "\t" $0}}' sample.asv.map sample.DNA.unique.good.filter.unique.precluster.pick.full.count_table | cut -f 1,4- > OTU_table.tsv
biom convert -i OTU_table.tsv -o mothur_shared.biom --table-type="OTU table" --to-hdf5
qiime tools import --type 'FeatureTable[Frequency]' --input-path mothur_shared.biom --output-path frequency_table.qza --input-format BIOMV210Format
qiime taxa barplot --i-table frequency_table.qza --i-taxonomy taxonomy_table.qza --m-metadata-file metadata.txt --o-visualization taxa-bar-plots.qzv
-------------------------------------------------------------------------------------------------------------------
then mothur results can be processed in QIIME2
-------------------------------------------------------------------------------------------------------------------
downstream analysis

##########
RNA part##
##########

Software dependent: metaxa2, mothur and QIIME2

1. transfer *bam to fastq
bedtools bamtofastq -i m64144_210705_100006.ccs.bam -fq sample.fq
2. demultiplex barcoded samples and quality control
trim.seqs(fasta=sample.fasta,qfile=sample.qual,oligos=oligo-all.txt,checkorient=T,bdiffs=2,pdiffs=4,maxambig=0,maxhomop=6,qwindowsize=50,qwindowaverage=35,flip=T,allfiles=T,minlength=1200,maxlength=2000,processors=30)
3. make fastq
make.fastq(fasta=sample.10_*.DNA.fasta,qfile=sample.10_*.DNA.qual)
4. metaxa assign SSU rRNA sequences fastq and pick bacteria fastq
for i in *fastq;metaxa2 -i $i -o $i.metaxa -x T --cpu 30 
for i in *results;awk '$3=="B" {print $1}' $i > $i.bacteria.names
parallel -j 32 "seqkit grep -f {1}.metaxa.extraction.results.bacteria.names {1} -o {1}.bacteria.fastq" ::: *RNA.fastq
parallel -j 32 "seqkit fq2fa {1} -o {1}.fasta" ::: *bacteria.fastq
ls|grep 'fastq.fasta' > file.list
cat file.list| tr "\n" "-" > file_list.txt
5. make group file for mothur process
mothur > make.group(fasta=sample.RNA10_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA10_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA10_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA10_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA10_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA10_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA10_7.RNA.fastq.bacteria.fastq.fasta-sample.RNA1_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA1_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA1_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA1_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA1_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA1_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA1_7.RNA.fastq.bacteria.fastq.fasta-sample.RNA2_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA2_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA2_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA2_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA2_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA2_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA2_7.RNA.fastq.bacteria.fastq.fasta-sample.RNA3_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA3_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA3_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA3_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA3_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA3_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA3_7.RNA.fastq.bacteria.fastq.fasta-sample.RNA4_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA4_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA4_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA4_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA4_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA4_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA4_7.RNA.fastq.bacteria.fastq.fasta-sample.RNA5_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA5_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA5_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA5_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA5_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA5_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA5_7.RNA.fastq.bacteria.fastq.fasta-sample.RNA6_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA6_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA6_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA6_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA6_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA6_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA6_7.RNA.fastq.bacteria.fastq.fasta-sample.RNA7_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA7_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA7_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA7_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA7_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA7_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA7_7.RNA.fastq.bacteria.fastq.fasta-sample.RNA8_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA8_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA8_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA8_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA8_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA8_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA8_7.RNA.fastq.bacteria.fastq.fasta-sample.RNA9_1.RNA.fastq.bacteria.fastq.fasta-sample.RNA9_2.RNA.fastq.bacteria.fastq.fasta-sample.RNA9_3.RNA.fastq.bacteria.fastq.fasta-sample.RNA9_4.RNA.fastq.bacteria.fastq.fasta-sample.RNA9_5.RNA.fastq.bacteria.fastq.fasta-sample.RNA9_6.RNA.fastq.bacteria.fastq.fasta-sample.RNA9_7.RNA.fastq.bacteria.fastq.fasta,groups=RNA10_1-RNA10_2-RNA10_3-RNA10_4-RNA10_5-RNA10_6-RNA10_7-RNA1_1-RNA1_2-RNA1_3-RNA1_4-RNA1_5-RNA1_6-RNA1_7-RNA2_1-RNA2_2-RNA2_3-RNA2_4-RNA2_5-RNA2_6-RNA2_7-RNA3_1-RNA3_2-RNA3_3-RNA3_4-RNA3_5-RNA3_6-RNA3_7-RNA4_1-RNA4_2-RNA4_3-RNA4_4-RNA4_5-RNA4_6-RNA4_7-RNA5_1-RNA5_2-RNA5_3-RNA5_4-RNA5_5-RNA5_6-RNA5_7-RNA6_1-RNA6_2-RNA6_3-RNA6_4-RNA6_5-RNA6_6-RNA6_7-RNA7_1-RNA7_2-RNA7_3-RNA7_4-RNA7_5-RNA7_6-RNA7_7-RNA8_1-RNA8_2-RNA8_3-RNA8_4-RNA8_5-RNA8_6-RNA8_7-RNA9_1-RNA9_2-RNA9_3-RNA9_4-RNA9_5-RNA9_6-RNA9_7)

6. 
summary.seqs(fasta=RNA.fasta,name=RNA.names)
7. 
unique.seqs(fasta=RNA.fasta, name=RNA.names)
8. 
summary.seqs(fasta=RNA.unique.fasta, name=RNA.unique.names)
9. 
align.seqs(fasta=RNA.unique.fasta,reference=/home/disk2/DATABAE/Mothur/silva.nr_v138.align,flip=T)
10. 
summary.seqs(fasta=RNA.unique.align,name=RNA.unique.names)

Using 32 processors.

		Start	End	NBases	Ambigs	Polymer	NumSeqs
Minimum:	1041	1046	2	0	1	1
2.5%-tile:	1044	42554	1347	0	5	21554
25%-tile:	1044	42558	1361	0	5	215535
Median: 	1044	42558	1367	0	6	431069
75%-tile:	1044	42558	1390	0	6	646603
97.5%-tile:	1044	42559	1398	0	7	840584
Maximum:	43115	43116	1999	0	30	862137
Mean:	1115	42542	1369	0	5
# of unique seqs:	830139
total # of seqs:	862137

It took 239 secs to summarize 862137 sequences.

Output File Names:
RNA.unique.summary
11. screen sequences according upstep results
screen.seqs(fasta=RNA.unique.align,start=1044,end=42554,minscore=90,minsim=90,alignreport=RNA.unique.align.report,group=RNA.groups,name=RNA.unique.names)
12. cut off sequences beyound Primer 1390R start site
pcr.seqs(fasta=RNA.unique.good.align,start=1044,end=41794,name=RNA.unique.good.names)
13. 
summary.seqs(fasta=RNA.unique.good.pcr.align, name=RNA.unique.good.names)
14. 
filter.seqs(fasta=RNA.unique.good.pcr.align)
15. 
unique.seqs(fasta=RNA.unique.good.pcr.filter.fasta, name=RNA.unique.good.names)
16. 
pre.cluster(fasta=RNA.unique.good.pcr.filter.unique.fasta, name=RNA.unique.good.pcr.filter.names, group=RNA.good.groups, diffs=15)
17. 
summary.seqs(fasta=RNA.unique.good.pcr.filter.unique.precluster.fasta, count=RNA.unique.good.pcr.filter.unique.precluster.count_table)
18. 
chimera.uchime(fasta=RNA.unique.good.pcr.filter.unique.precluster.fasta, count=RNA.unique.good.pcr.filter.unique.precluster.count_table)
19. 
remove.seqs(accnos=RNA.unique.good.pcr.filter.unique.precluster.denovo.uchime.accnos, fasta=RNA.unique.good.pcr.filter.unique.precluster.fasta, count=RNA.unique.good.pcr.filter.unique.precluster.count_table, dups=T)
20. 
classify.seqs(fasta=RNA.unique.good.pcr.filter.unique.precluster.pick.fasta, count=RNA.unique.good.pcr.filter.unique.precluster.pick.count_table, reference=/home/disk2/DATABAE/QIIME2/silva-138-99-seqs.fasta, taxonomy=/home/disk2/DATABAE/QIIME2/silva-138-99.tax, cutoff=80)
--------------------------------------------------
as mothur describe in Miseq/454 SOP, otu table can be produced when i follow next steps. However, i found there is a bug in make.shared
--------------------------------------------------
21. 
make.shared(count=RNA.unique.good.pcr.filter.unique.precluster.pick.count_table)####this command produce right list file,but wrong *shared file.
22. 
classify.otu(list=RNA.unique.good.pcr.filter.unique.precluster.pick.ASV.list,count=RNA.unique.good.pcr.filter.unique.precluster.pick.count_table,taxonomy=RNA.unique.good.pcr.filter.unique.precluster.pick.silva_138_99.wang.taxonomy,label=ASV)
--------------------------------------------------
Alternatively, i use follow step achieve final OTU_table
--------------------------------------------------
sed -n '1p' RNA.unique.good.pcr.filter.unique.precluster.pick.ASV.list|cut -f 3- | sed 's/\t/\n/g' > sample.otu.accnos

sed -n '2p' RNA.unique.good.pcr.filter.unique.precluster.pick.ASV.list|cut -f 3- | sed 's/\t/\n/g' > sample.asv.accnos

paste sample.asv.accnos sample.otu.accnos > sample.asv.map

count.seqs(count=sample.asv.map,count=RNA.unique.good.pcr.filter.unique.precluster.pick.count_table,compress=f)

awk 'NR==FNR{huty[$1]=$2;next}NR>FNR{if($1 in huty){print huty[$1] "\t" $0} else {print "OTU ID" "\t" $0}}' sample.asv.map RNA.unique.good.pcr.filter.unique.precluster.pick.full.count_table | cut -f 1,4- > OTU_table.tsv

biom convert -i OTU_table.tsv -o mothur_shared.biom --table-type="OTU table" --to-hdf5 

qiime tools import --type 'FeatureTable[Frequency]' --input-path mothur_shared.biom --output-path frequency_table.qza --input-format BIOMV210Format

cut -f 1,3 RNA.unique.good.pcr.filter.unique.precluster.pick.ASV.ASV.cons.taxonomy | paste > tax.tsv

sed 's/OTU\tTaxonomy/Feature ID\tTaxon/' tax.tsv > taxonomy.tsv

qiime tools import --type 'FeatureData[Taxonomy]' --input-path taxonomy.txt --output-path taxonomy_table.qza --input-format TSVTaxonomyFormat

qiime taxa barplot --i-table frequency_table.qza --i-taxonomy taxonomy_table.qza --m-metadata-file metadata.txt --o-visualization taxa-bar-plots.qzv

make represent sequences

rename.seqs(fasta=RNA.unique.good.filter.unique.precluster.pick.fasta,map=sample.asv.map)

seqkit seq -g sample.DNA.unique.good.filter.unique.precluster.pick.renamed.fasta -o sample.rep.fasta

qiime tools import --input-path sample.rep.fasta --output-path sequences.qza --type 'FeatureData[Sequence]'
